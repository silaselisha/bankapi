// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one

INSERT INTO
    "users" (
        username,
        fullname,
        email,
        password
    )
VALUES ($1, $2, $3, $4)
RETURNING username, fullname, email, password, created_at, updated_at
`

type CreateUserParams struct {
	Username string `db:"username"`
	Fullname string `db:"fullname"`
	Email    string `db:"email"`
	Password string `db:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Fullname,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT username, fullname, email, password, created_at, updated_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
